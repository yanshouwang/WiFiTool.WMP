"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var encodeUtf8 = require("encode-utf8");
var decodeUtf8 = require("decode-utf8");
var serviceId = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
var notifyCharacteristicId = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";
var writeCharacteristicId = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
var getStatusCmd = "GET STUTAS";
var modifyCmd = "MODIFY";
var keepAliveCmd = "KEEP ALIVE";
var endSymbol = "\r\n";
var ethernet = "ethernet";
var wifi = "wifi";
var obj1 = {
    advertisData: new ArrayBuffer(0),
    advertisServiceUUIDs: [],
    serviceData: [],
    deviceId: "",
    RSSI: 0,
    name: "",
    localName: ""
};
var intervalID = -1;
var hide = false;
var unload = false;
Page({
    data: {
        device: obj1,
        connected: true,
        adapters: [
            {
                type: ethernet,
                connected: false
            },
            {
                type: wifi,
                connected: false
            }
        ]
    },
    onLoad: function () {
        var _this = this;
        console.log("device: onLoad");
        wx.onBLEConnectionStateChange(function (res) { return _this.onConnectionStateChange(res); });
        wx.onBLECharacteristicValueChange(function (res) { return _this.onCharacteristicValueChange(res); });
        var eventChannel = this.getOpenerEventChannel();
        eventChannel.on("device", function (device) { return _this.onLoadDevice(device); });
    },
    onReady: function () {
        console.log("device: onReady");
    },
    onShow: function () {
        console.log("device: onShow");
        hide = false;
        if (!this.data.connected) {
            this.connect();
        }
    },
    onHide: function () {
        console.log("device: onHide");
        hide = true;
    },
    onUnload: function () {
        console.log("device: onUnload");
        unload = true;
        this.disconnect();
    },
    onPullDownRefresh: function () {
    },
    onReachBottom: function () {
    },
    onShareAppMessage: function (opts) {
        console.log(opts.target);
        return {};
    },
    onLoadDevice: function (device) {
        var data = { "device": device };
        this.setData(data);
        this.connect();
    },
    onTapAdapter: function (e) {
        var device = this.data.device;
        var i = e.currentTarget.id;
        var adapter = this.data.adapters[i];
        var option = {
            url: "../adapter/adapter",
            success: function (res) { return res.eventChannel.emit("adapter", device, adapter); }
        };
        wx.navigateTo(option);
    },
    onConnectionStateChange: function (res) {
        var _this = this;
        var device = this.data.device;
        if (res.deviceId !== device.deviceId) {
            return;
        }
        var connected = res.connected;
        var data = { "connected": connected };
        this.setData(data);
        console.log("\u8FDE\u63A5\u72B6\u6001\u6539\u53D8\uFF1A" + connected);
        if (connected) {
            var option1 = {
                deviceId: device.deviceId,
                success: function () {
                    var option2 = {
                        deviceId: device.deviceId,
                        serviceId: serviceId,
                        success: function () {
                            var option3 = {
                                deviceId: device.deviceId,
                                serviceId: serviceId,
                                characteristicId: notifyCharacteristicId,
                                state: true,
                                success: function () {
                                    _this.keepAlive();
                                    _this.getStatus();
                                },
                                fail: function (res) { return console.log("\u6253\u5F00\u901A\u77E5\u5931\u8D25\uFF1A " + res.errCode + " - " + res.errMsg); }
                            };
                            wx.notifyBLECharacteristicValueChange(option3);
                        },
                        fail: function (res) { return console.log("\u83B7\u53D6\u7279\u5F81\u503C\u5931\u8D25\uFF1A " + res.errCode + " - " + res.errMsg); }
                    };
                    wx.getBLEDeviceCharacteristics(option2);
                },
                fail: function (res) { return console.log("\u83B7\u53D6\u670D\u52A1\u5931\u8D25\uFF1A " + res.errCode + " - " + res.errMsg); }
            };
            wx.getBLEDeviceServices(option1);
        }
        else {
            clearInterval(intervalID);
            if (!hide && !unload) {
                this.connect();
            }
        }
    },
    onCharacteristicValueChange: function (res) {
        console.log("特征值改变");
        var device = this.data.device;
        if (res.deviceId !== device.deviceId || res.serviceId !== serviceId || res.characteristicId !== notifyCharacteristicId) {
            return;
        }
        var str = decodeUtf8(res.value).trim();
        console.log(str);
        var value = JSON.parse(str);
        var cmd = value.cmd;
        switch (cmd) {
            case getStatusCmd:
            case modifyCmd: {
                var obj_1 = {
                    ssid: value.ssid,
                    address: value.address,
                    mask: value.mask,
                    gateway: value.gateway,
                    dns: value.dns
                };
                var data = {};
                switch (value.mode) {
                    case "ethernet": {
                        data["ethernet"] = obj_1;
                        data["wifi"] = {};
                        break;
                    }
                    case "wifi": {
                        data["ethernet"] = {};
                        data["wifi"] = obj_1;
                        break;
                    }
                    case "none": {
                        data["ethernet"] = {};
                        data["ethernet"] = {};
                        break;
                    }
                    default: {
                        break;
                    }
                }
                this.setData(data);
                wx.hideLoading();
                break;
            }
            default: {
                break;
            }
        }
    },
    onValuesChange: function (e) {
        var key = e.currentTarget.dataset.key;
        var value = e.detail.value;
        var data = {};
        data[key] = value;
        this.setData(data);
    },
    onIPChange: function (e) {
        var key = e.currentTarget.dataset.key;
        var value = e.detail.value;
        var data = {};
        data["ip." + key] = value;
        this.setData(data);
    },
    onDNSChange: function (e) {
        var key = e.currentTarget.dataset.key;
        var value = e.detail.value;
        var data = {};
        data["dns." + key] = value;
        this.setData(data);
    },
    connect: function () {
        var connected = this.data.connected;
        if (connected) {
            return;
        }
        var device = this.data.device;
        var option = {
            deviceId: device.deviceId,
            success: function () { return console.log("\u8FDE\u63A5\u6210\u529F"); },
            fail: function (res) { return console.log("\u8FDE\u63A5\u5931\u8D25\uFF1A" + res.errCode + " - " + res.errMsg); }
        };
        wx.createBLEConnection(option);
        this.showLoading("正在连接");
    },
    disconnect: function () {
        var connected = this.data.connected;
        if (!connected) {
            return;
        }
        var device = this.data.device;
        var option = {
            deviceId: device.deviceId,
            success: function () { return console.log("\u65AD\u5F00\u6210\u529F"); },
            fail: function (res) { return console.log("\u65AD\u5F00\u5931\u8D25\uFF1A" + res.errCode + " - " + res.errMsg); }
        };
        wx.closeBLEConnection(option);
    },
    write: function (str) {
        str = "" + str + endSymbol;
        var device = this.data.device;
        var value = encodeUtf8(str);
        var option2 = {
            deviceId: device.deviceId,
            serviceId: serviceId,
            characteristicId: writeCharacteristicId,
            value: value,
            success: function () { return console.log("\u5199\u5165\u6210\u529F\uFF1A" + str); },
            fail: function (res) { return console.log("\u5199\u5165\u5931\u8D25\uFF1A " + res.errCode + " - " + res.errMsg); }
        };
        wx.writeBLECharacteristicValue(option2);
    },
    keepAlive: function () {
        var _this = this;
        var value = {
            cmd: keepAliveCmd
        };
        var str = JSON.stringify(value);
        intervalID = setInterval(function () { return _this.write(str); }, 20 * 1000);
    },
    getStatus: function () {
        var value = {
            cmd: getStatusCmd
        };
        var str = JSON.stringify(value);
        this.write(str);
    },
    modify: function (mode, address, mask, gateway, dns, ssid, password) {
        var value = {
            cmd: modifyCmd,
            mode: mode,
            ssid: ssid,
            password: password,
            address: address,
            mask: mask,
            gateway: gateway,
            dns: dns
        };
        var str = JSON.stringify(value);
        this.write(str);
        this.showLoading("正在配置网络");
    },
    showLoading: function (title) {
        var option = {
            title: title,
            mask: true
        };
        wx.showLoading(option);
    }
});
//# sourceMappingURL=data:application/json;base64,