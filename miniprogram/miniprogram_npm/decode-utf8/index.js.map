{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nfunction toUint8Array (input) {\n  if (input instanceof Uint8Array) return input\n  if (input instanceof ArrayBuffer) return new Uint8Array(input)\n\n  throw new TypeError('Expected \"input\" to be an ArrayBuffer or Uint8Array')\n}\n\nmodule.exports = function decodeUtf8 (input) {\n  const data = toUint8Array(input)\n  const size = data.length\n\n  let result = ''\n\n  for (let index = 0; index < size; index++) {\n    let byte1 = data[index]\n\n    // US-ASCII\n    if (byte1 < 0x80) {\n      result += String.fromCodePoint(byte1)\n      continue\n    }\n\n    // 2-byte UTF-8\n    if ((byte1 & 0xE0) === 0xC0) {\n      let byte2 = (data[++index] & 0x3F)\n      result += String.fromCodePoint(((byte1 & 0x1F) << 6) | byte2)\n      continue\n    }\n\n    if ((byte1 & 0xF0) === 0xE0) {\n      let byte2 = (data[++index] & 0x3F)\n      let byte3 = (data[++index] & 0x3F)\n      result += String.fromCodePoint(((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3)\n      continue\n    }\n\n    if ((byte1 & 0xF8) === 0xF0) {\n      let byte2 = (data[++index] & 0x3F)\n      let byte3 = (data[++index] & 0x3F)\n      let byte4 = (data[++index] & 0x3F)\n      result += String.fromCodePoint(((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) | (byte3 << 0x06) | byte4)\n      continue\n    }\n  }\n\n  return result\n}\n"]}